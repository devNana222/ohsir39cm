# 사용방법 
# 1. 패키지 구조
# |   docker-compose-kafka.yml
# |
# \---kafka
#     +---zookeeper_data
#     +---zookeeper_logs
#     +---kafka_data
# 
# 2. 네트워크 생성: docker network create ls
# 3. 실행: docker-compose -f docker-compose-kafka.yml up -d
# 4. kafka-ui확인(주소창에 입력): localhost:8090

version: '3'

services:
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.5.4
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    #volumes:
    #  - .\kafka\zookeeper_data:/var/lib/zookeeper/data
    #  - .\kafka\zookeeper_logs:/var/lib/zookeeper/log
    restart: always

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.5.4
    depends_on:
      - zookeeper
    ports:
      - "29092:29092" #외부접속
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092 #9092 : container들 끼리 29092 : 로컬에서 접속할 때
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    #volumes:
    #  - .\kafka\kafka_data:/var/lib/kafka/data
    #confluent
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: Single Cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: always
